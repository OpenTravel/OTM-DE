Unit Test Notes

Utilities

 -org.opentravel.schemas.testUtils
   -- MockLibrary
		--- create libraries
		--- add objects
		--- print descendents and findings
   	-- InitModel - just tests ability to create MainController
	-- LoadFiles 
		--- also has tests
		--- load test files
		--- clean model - removes loaded nodes with faults (not used)
	-- ModelCheckUtils
		--- check counts (not used)
		--- compare (not used)
	-- NodeTesters
		--- TestNode - class implements visitor
		--- PrintNode - visitor class that prints node name
		--- ValidateTLObject - visitor class that checks TL object
		--- visitNode - comprehensive assertions against object
		--- validateTL - Validate the TL object owning and library relationships.
	-- Utils	
		-- BaseProjectTest
			-- See LibraryNodeTest
			-- provides access to a repository controller needed to create projects
				--	ProjectNode project1 = createProject("Project1", rc.getLocalRepository(), "IT1");

Question: should test be in src or test?
	src gives access to protected but not private data and methods. So does test.
	Test is understood in maven projects to be excluded from application. Migrate to /test
		
Patterns - 
Node/* - 
	/**
	 * constructor tests
	 */
	@Test
	public void Core_ConstructorTests() {

	}

	/**
	 * factory tests
	 */
	@Test
	public void Core_FactoryTests() {

	}

	/**
	 * load from library tests
	 */
	@Test
	public void Core_FileLoadTests() {

	}

	/**
	 * assigned type tests
	 */
	@Test
	public void Core_TypeAssignmentTests() {

	}
	
Command/* - 
	inlcude all tests on nodes relevent to the action/command

Validating the Model
		NodeTesters nt = new NodeTesters();
		sourceLib.visitAllNodes(nt.new TestNode());
	or just run the tlModel validation
		node.validate();
	
New Objects
	NEVER build bespoke objects unless they are the subject of the class. ALWAYS use MockLibrary.
	
Test design
// Given - what is pre-condition
// When - what is done
// Then - what must be true
			assertTrue("Must be in ln2 library.", type.getLibrary() == ln2);
			assertNotNull("Must not be null.", x.getNavChildren());
void org.junit.Assert.assertTrue(String message, boolean condition)

Testing in Minor and Patch Versions
	This will make a new library in any specific version. No previous versions are related. NOT in a library chain!
		ln = LibraryNodeBuilder.create("Example", "http://example.org", "p", new Version(1, 1, 0)).build(defaultProject, pc);
		ln.setEditable(true);
		assertTrue("Library is minor version.", ln.isMinorVersion());
		lcn = new LibraryChainNode(ln); // put in chain


Class design
	Node - xxxx_Test - tests constructors and methods UNIQUE to a class
		xxxConstructors()
		xxxMethods()
		usageCallingMethod()